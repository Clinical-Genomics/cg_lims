import logging
from datetime import date
from enum import Enum
from typing import List, Optional

from cg_lims.exceptions import MissingUDFsError
from cg_lims.get.artifacts import get_latest_analyte
from genologics.entities import Artifact, Entity, Process
from genologics.lims import Lims

LOG = logging.getLogger(__name__)


class UserDefinedFields(str, Enum):
    READS = "# Reads"
    Q30 = "% Bases >=Q30"
    Q30_THRESHOLD = "Threshold for % bases >= Q30"


def get_udf_type(lims: Lims, udf_name: str, attach_to_name: str) -> Optional:
    """Get udf type.

    Args:
        udf_name:
            eg: 'Concentration (nM)', 'Comment',...
        attach_to_name: name of entity to which the udf is attached
            eg. 'ResultFile', 'Analyte', 'Aggregate QC (RNA)',...
    """
    udf_types = {"String": str, "Numeric": float, "Date": date}

    udf_configs = lims.get_udfs(name=udf_name, attach_to_name=attach_to_name)
    udf_configs[0].get()
    udf_type = udf_configs[0].root.attrib["type"]

    return udf_types[udf_type]


def get_udf(entity: Entity, udf: str) -> str:
    """Returns the value of a udf on a entity.
    entity can be a Artifact, Sample, Process, etc"""
    try:
        return entity.udf[udf]
    except Exception:
        message = f"UDF {udf} not found on {entity._TAG} {entity.id}!"
        LOG.error(message)
        raise MissingUDFsError(message)


def get_q30_threshold(entity: Entity) -> Optional[str]:
    try:
        return get_udf(entity, UserDefinedFields.Q30_THRESHOLD.value)
    except MissingUDFsError:
        return None


def get_maximum_amount(artifact: Artifact, default_amount: float) -> float:
    """Return the maximum allowed input amount of an artifact. A default value is returned if no UDF has been set."""
    sample = artifact.samples[0]
    maximum_amount = sample.udf.get("Maximum input amount (ng)")
    if maximum_amount:
        return maximum_amount
    return default_amount


def get_analyte_udf(lims: Lims, sample_id: str, process_types: List[str], udf: str) -> float:
    """Return the UDF value of an analyte, given: sample ID, parent process type, UDF name."""
    artifact = get_latest_analyte(lims=lims, process_types=process_types, sample_id=sample_id)
    value = artifact.udf.get(udf)
    if not value:
        raise MissingUDFsError(
            f"Couldn't find UDF '{udf}' for artifacts of sample {sample_id} generated by the step {process_types}"
        )
    return value


def get_final_concentration(process: Process, final_concentration_udf: str) -> float:
    """Return final concentration value from process."""
    return float(get_udf(entity=process, udf=final_concentration_udf))


def get_artifact_concentration(artifact: Artifact, concentration_udf: str) -> float:
    """Return concentration value from artifact."""
    return float(get_udf(entity=artifact, udf=concentration_udf))


def get_artifact_volume(artifact: Artifact, sample_volume_udf: str) -> float:
    """Return volume value from artifact."""
    return float(get_udf(entity=artifact, udf=sample_volume_udf))


def get_total_volume(artifact: Artifact, total_volume_udf: str) -> float:
    """Return total volume value from artifact."""
    return float(get_udf(entity=artifact, udf=total_volume_udf))


def get_process_total_volume(process: Process, total_volume_udf: str) -> Optional[float]:
    """Return total volume value from process."""
    return process.udf.get(total_volume_udf)
